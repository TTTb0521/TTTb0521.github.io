<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>StackAndQueue</title>
    <url>/2025/03/17/StackAndQueue/</url>
    <content><![CDATA[<h1 id="栈和队列"><a href="#栈和队列" class="headerlink" title="栈和队列"></a>栈和队列</h1><blockquote>
<p><strong>栈、队列、双端队列均是线性表的特殊情况（访问受限的线性表）</strong><br><img src="/2025/03/17/StackAndQueue/%E8%AE%BF%E9%97%AE%E5%8F%97%E9%99%90%E7%9A%84%E7%BA%BF%E6%80%A7%E8%A1%A8.png" alt="alt text"></p>
</blockquote>
<h2 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h2><ul>
<li>允许插入、删除的一端称为&#x3D;&#x3D;栈顶(top)&#x3D;&#x3D;，另一端称为&#x3D;&#x3D;栈底(bottom)&#x3D;&#x3D;</li>
<li>在栈顶插入元素称为&#x3D;&#x3D;入栈(push)&#x3D;&#x3D;，删除元素称为&#x3D;&#x3D;出栈(pop)&#x3D;&#x3D;</li>
</ul>
<h3 id="顺序栈——栈的顺序存储实现"><a href="#顺序栈——栈的顺序存储实现" class="headerlink" title="顺序栈——栈的顺序存储实现"></a>顺序栈——栈的顺序存储实现</h3><p><strong>顺序栈存储空间的处理</strong><br><img src="/2025/03/17/StackAndQueue/%E9%A1%BA%E5%BA%8F%E6%A0%88%E5%AD%98%E5%82%A8%E7%A9%BA%E9%97%B4%E7%9A%84%E5%A4%84%E7%90%86.png" alt="alt text"></p>
<p><strong>顺序栈的特点</strong>：</p>
<ol>
<li>顺序栈的入栈和出栈、构造和销毁的&#x3D;&#x3D;复杂度都是O(1)&#x3D;&#x3D;</li>
<li>可以采用溢出时增容，或者&#x3D;&#x3D;共享栈&#x3D;&#x3D;的方式提高空间利用率</li>
</ol>
<h3 id="链式栈——栈的链式存储分配实现"><a href="#链式栈——栈的链式存储分配实现" class="headerlink" title="链式栈——栈的链式存储分配实现"></a>链式栈——栈的链式存储分配实现</h3><p><strong>链式栈的特点</strong>：</p>
<ol>
<li>链式栈的&#x3D;&#x3D;入栈和出栈复杂度为O(1)&#x3D;&#x3D;，&#x3D;&#x3D;构造和销毁的复杂度是O(n)<strong>(需要逐个释放&#x2F;创建)</strong>&#x3D;&#x3D;</li>
<li>栈的长度动态变化，空间利用率高，一般&#x3D;&#x3D;无需判断溢出&#x3D;&#x3D;</li>
</ol>
<h3 id="栈的应用"><a href="#栈的应用" class="headerlink" title="栈的应用"></a>栈的应用</h3><ul>
<li><p><strong>十进制数到二进制数的转换</strong><br><img src="/2025/03/17/StackAndQueue/%E5%8D%81%E8%BF%9B%E5%88%B6%E8%BD%AC%E4%BA%8C%E8%BF%9B%E5%88%B6.png" alt="alt text"></p>
<br>
</li>
<li><p><strong>算术表达式求值的栈实现</strong></p>
<p>  中缀表达式实现步骤：</p>
<ol>
<li>初始化:结束符‘#’入栈:Sr.Push(‘#’)</li>
<li>如果W是操作数则入栈:Sd.Push(W)</li>
<li>若W为运算符，则有以下几种情况:<ol>
<li>若W优先级高于Sr栈顶元素则入栈:Sr.Push(W)</li>
<li>若W优先级低于Sr栈顶元素则执行运算操作:<br> Sd.Pop(x1);Sd.Pop(x2);Sr.Pop(@);Sd.Push(x2@X1)</li>
<li>若W等于Sr栈顶元素则弹出Sr栈顶元素</li>
</ol>
</li>
<li>Sd即为运算结果  <br></li>
</ol>
<p>  中缀转后缀表达式：<br>  维护两个栈：运算符(OP)和结果栈(R)</p>
<ul>
<li>扫描到操作数，R入栈;扫描到’(‘，OP入栈</li>
<li>扫描到运算符:<br>  当前运算符优先级高于OP栈顶元紊优先级，OP入栈<br>  否则，则OP栈出栈，R栈入栈</li>
<li>扫描到’)’，OP出栈，到pop出’)’为止。如果pop出的元素不是’(‘或’)’，则将元素压入R<br>  <img src="/2025/03/17/StackAndQueue/%E5%90%8E%E7%BC%80%E8%A1%A8%E8%BE%BE%E5%BC%8F.png" alt="alt text"></li>
</ul>
</li>
</ul>
<h3 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h3><blockquote>
<p>适用情况：问题可以&#x3D;&#x3D;收敛&#x3D;&#x3D;</p>
</blockquote>
<ul>
<li><p><strong>阶乘求值</strong><br><img src="/2025/03/17/StackAndQueue/%E9%98%B6%E4%B9%98%E6%B1%82%E5%80%BC.png" alt="alt text"></p>
<br>
<br>
</li>
<li><p><strong>阿克曼函数</strong><br>特点：随着输入值的增加，函数的值<strong>增长得非常快</strong><br>定义如下：<br><img src="/2025/03/17/StackAndQueue/%E9%98%BF%E5%85%8B%E6%9B%BC%E5%87%BD%E6%95%B0%E5%AE%9A%E4%B9%89.png" alt="alt text"><br>  递归实现：</p>
  <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">c</span><span class="params">(<span class="type">int</span> m, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(m == <span class="number">0</span>) <span class="keyword">return</span> n + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(n == <span class="number">0</span> &amp;&amp; m &gt; <span class="number">0</span>) <span class="keyword">return</span> <span class="built_in">c</span>(m - <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span>(m &gt; <span class="number">0</span> &amp;&amp; n &gt; <span class="number">0</span>)<span class="keyword">return</span> <span class="built_in">c</span>(m - <span class="number">1</span>, <span class="built_in">c</span>(m, n - <span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> a, b;</span><br><span class="line">    cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">c</span>(a, b);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<br>
<br>
</li>
<li><p><strong>斐波那契数列</strong><br>递归定义：<br><img src="/2025/03/17/StackAndQueue/%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E5%AE%9A%E4%B9%89.png" alt="alt text"></p>
<br>

<p>  递归实现：<br>  <img src="/2025/03/17/StackAndQueue/%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E5%AE%9E%E7%8E%B0.png" alt="alt text"><br>  F(5)的栈调用情况：<br>  <img src="/2025/03/17/StackAndQueue/%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%A0%88%E8%B0%83%E7%94%A8.png" alt="alt text"></p>
</li>
</ul>
<br>
<br>

<ul>
<li><strong>最大公约数</strong><br>定义：可以同时除尽两个正整数的最大的正整数<br><img src="/2025/03/17/StackAndQueue/%E6%9C%80%E5%A4%A7%E5%85%AC%E7%BA%A6%E6%95%B0.png" alt="alt text"><br>

  递归实现：  <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">long</span> <span class="title">gcd</span><span class="params">(<span class="type">unsigned</span> <span class="type">long</span> a,<span class="type">unsigned</span> <span class="type">long</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> r = a % b;</span><br><span class="line">    <span class="keyword">if</span>(r != <span class="number">0</span>) <span class="keyword">return</span> <span class="built_in">gcd</span>(b，r);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<br>
<br>

<ul>
<li><p><strong>互递归</strong><br>定义：一种非直接递归，两个函数互相借助对方定义<br>示例：<br><img src="/2025/03/17/StackAndQueue/%E4%BA%92%E9%80%92%E5%BD%92.png" alt="alt text"></p>
<br>
<br>
</li>
<li><p><strong>汉诺塔问题</strong><br>递归步骤：<br><img src="/2025/03/17/StackAndQueue/%E6%B1%89%E8%AF%BA%E5%A1%94.png" alt="alt text"></p>
<br>

<p>  递归实现：<br>  <img src="/2025/03/17/StackAndQueue/%E6%B1%89%E8%AF%BA%E5%A1%94%E5%AE%9E%E7%8E%B0.png" alt="alt text"><br>  <em><strong>先把 n - 1 个移动到y，然后移动最底下的到z，然后把 n - 1 个从y移动到z</strong></em></p>
</li>
</ul>
<br>

<pre><code>复杂度分析：
![alt text](StackAndQueue/汉诺塔复杂度分析.png)
</code></pre>
<br>
<br>

<h3 id="递归的消去"><a href="#递归的消去" class="headerlink" title="递归的消去"></a>递归的消去</h3><h4 id="尾递归"><a href="#尾递归" class="headerlink" title="尾递归"></a>尾递归</h4><p>定义：函数最后操作时<strong>递归调用或平凡返回</strong>（&#x3D;&#x3D;返回已经存在的值&#x3D;&#x3D;）</p>
<blockquote>
<p><strong>为什么需要尾递归？</strong><br>对于非尾递归来说，由于最后的返回值需要额外计算，因此&#x3D;&#x3D;经历了创建栈帧、销毁栈帧的过程，可能导致栈溢出&#x3D;&#x3D;。</p>
<p>以计算阶乘的普通递归实现为例:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">factorial</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">if</span> (n == <span class="number">0</span>)</span><br><span class="line">       <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">   <span class="keyword">else</span></span><br><span class="line">       <span class="keyword">return</span> n * <span class="built_in">factorial</span>(n - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当调用factorial(3)时，执行过程如下：</p>
<p>调用factorial(3)，&#x3D;&#x3D;创建栈帧A&#x3D;&#x3D;，保存参数n&#x3D;3。<br>执行到return n * factorial(n - 1)时，需要先计算factorial(2)的值。</p>
<p>调用factorial(2)，&#x3D;&#x3D;创建新的栈帧B&#x3D;&#x3D;，保存参数n&#x3D;2。<br>执行到return n * factorial(n - 1)时，需要先计算factorial(1)的值。</p>
<p>调用factorial(1)，&#x3D;&#x3D;创建新的栈帧C&#x3D;&#x3D;，保存参数n&#x3D;1。<br>执行到return n * factorial(n - 1)时，需要先计算factorial(0)的值。</p>
<p>调用factorial(0)，&#x3D;&#x3D;创建新的栈帧D&#x3D;&#x3D;，保存参数n&#x3D;0。<br>执行到return 1，返回值1，销毁栈帧D。</p>
<p>栈帧C继续执行，计算1 * 1&#x3D;1，返回值1，&#x3D;&#x3D;销毁栈帧C&#x3D;&#x3D;。<br>栈帧B继续执行，计算2 * 1&#x3D;2，返回值2，&#x3D;&#x3D;销毁栈帧B&#x3D;&#x3D;。<br>栈帧A继续执行，计算3 * 2&#x3D;6，返回值6，&#x3D;&#x3D;销毁栈帧A&#x3D;&#x3D;。</p>
<p><em><strong>在这个过程中，每次递归调用都会创建新的栈帧，栈帧数量随着递归深度增加而增加，可能导致栈溢出，并且每次创建和销毁栈帧都会带来性能开销。</strong></em></p>
</blockquote>
<br>

<p><strong>尾递归优化的执行过程：</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">factorial_tail</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> acc)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> acc;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">factorial_tail</span>(n - <span class="number">1</span>, n * acc);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>初始调用时，acc的初始值为1。例如，计算factorial_tail(3, 1)的执行过程如下：<br>调用factorial_tail(3, 1)，&#x3D;&#x3D;创建栈帧A&#x3D;&#x3D;，保存参数n&#x3D;3，acc&#x3D;1。</p>
<p>执行到return factorial_tail(n - 1, n * acc)时，计算新的参数值n-1&#x3D;2，n * acc&#x3D;3*1&#x3D;3。<br>调用factorial_tail(2, 3)，&#x3D;&#x3D;复用栈帧A&#x3D;&#x3D;，更新参数n&#x3D;2，acc&#x3D;3。</p>
<p>执行到return factorial_tail(n - 1, n * acc)时，计算新的参数值n-1&#x3D;1，n * acc&#x3D;2*3&#x3D;6。<br>调用factorial_tail(1, 6)，&#x3D;&#x3D;复用栈帧A&#x3D;&#x3D;，更新参数n&#x3D;1，acc&#x3D;6。</p>
<p>执行到return factorial_tail(n - 1, n * acc)时，计算新的参数值n-1&#x3D;0，n * acc&#x3D;1*6&#x3D;6。<br>调用factorial_tail(0, 6)，&#x3D;&#x3D;复用栈帧A&#x3D;&#x3D;，更新参数n&#x3D;0，acc&#x3D;6。</p>
<p>执行到return acc，返回值6，&#x3D;&#x3D;销毁栈帧A&#x3D;&#x3D;。</p>
<p><em><strong>在这个过程中，每次递归调用复用当前栈帧，不需要创建新的栈帧，因此栈帧数量始终保持为1，不会导致栈溢出，并且避免了创建和销毁栈帧的性能开销。</strong></em><br><br></p>
<p><strong>底层原理</strong><br><strong>尾递归优化的关键在于编译器能够识别出尾递归调用，并将其转换为循环操作</strong>。具体来说，当编译器检测到一个函数调用是尾递归时，它会生成代码来复用当前的栈帧，而不是创建新的栈帧。这通常是通过将递归调用的参数更新到当前栈帧的变量中，并跳转到函数的开头重新执行来实现的。<br><br></p>
<p><strong>常见简单问题的尾递归实现</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//TODO...</span></span><br></pre></td></tr></table></figure>
<br>
<br>

<h2 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h2><blockquote>
<p><strong>定义：限制数据一端插入，另一端删除的特殊线性表</strong></p>
<ul>
<li>允许插入的一端称为&#x3D;&#x3D;队尾(rear)&#x3D;&#x3D;，允许删除的一端称为&#x3D;&#x3D;队头(front)&#x3D;&#x3D;</li>
<li>入队为&#x3D;&#x3D;Enqueue&#x3D;&#x3D;，出队为&#x3D;&#x3D;Dequeue&#x3D;&#x3D;<br></li>
</ul>
</blockquote>
<h3 id="顺序队列"><a href="#顺序队列" class="headerlink" title="顺序队列"></a>顺序队列</h3><h4 id="存储"><a href="#存储" class="headerlink" title="存储"></a>存储</h4><p><img src="/2025/03/17/StackAndQueue/%E9%A1%BA%E5%BA%8F%E9%98%9F%E5%88%97%E7%9A%84%E5%AD%98%E5%82%A8.png" alt="alt text"><br><br></p>
<h4 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h4><p><img src="/2025/03/17/StackAndQueue/%E9%A1%BA%E5%BA%8F%E9%98%9F%E5%88%97%E7%9A%84%E6%93%8D%E4%BD%9C.png" alt="alt text"><br><img src="/2025/03/17/StackAndQueue/%E9%A1%BA%E5%BA%8F%E9%98%9F%E5%88%97%E7%9A%84%E6%93%8D%E4%BD%9C2.png" alt="alt text"><br><strong>假溢出</strong>：rear已经到达数组末尾，尽管队列中仍有空闲空间（front之前的位置），但由于rear无法继续向后移动，导致假溢出。<br><br></p>
<h3 id="循环队列——解决假溢出问题"><a href="#循环队列——解决假溢出问题" class="headerlink" title="循环队列——解决假溢出问题"></a>循环队列——解决假溢出问题</h3><blockquote>
<p><em><strong>顺序数列无法利用队头指针之前的空间，因此假溢出的本质是没有完全利用数组空间。而循环数列通过连成环解决了这一问题。由于首尾相接，因此循环队列需要做的只是找到判空和判满的办法。</strong></em><br><br><br><img src="/2025/03/17/StackAndQueue/%E5%BE%AA%E7%8E%AF%E9%98%9F%E5%88%97.png" alt="alt text"></p>
</blockquote>
<br>

<ul>
<li><p><strong>方法一：留出空位</strong><br><img src="/2025/03/17/StackAndQueue/%E7%95%99%E5%87%BA%E7%A9%BA%E4%BD%8D.png" alt="alt text"><br>  判断条件：</p>
<ol>
<li>队列为空：<strong>front &#x3D;&#x3D; rear</strong></li>
<li>队列为满：<strong>front &#x3D;&#x3D; (rear + 1) % max</strong><br></li>
</ol>
</li>
<li><p><strong>其他方法易于理解</strong>：<br><img src="/2025/03/17/StackAndQueue/%E5%85%B6%E4%BB%96%E6%96%B9%E6%B3%95.png" alt="alt text"></p>
<br>
<br></li>
</ul>
<h3 id="链式队列——链式存储方式"><a href="#链式队列——链式存储方式" class="headerlink" title="链式队列——链式存储方式"></a>链式队列——链式存储方式</h3><p>和链表的逻辑一致，易于理解：<br><img src="/2025/03/17/StackAndQueue/%E9%93%BE%E5%BC%8F%E9%98%9F%E5%88%97.png" alt="alt text"></p>
<h3 id="优先队列"><a href="#优先队列" class="headerlink" title="优先队列"></a>优先队列</h3><p>易于理解：<br><img src="/2025/03/17/StackAndQueue/%E4%BC%98%E5%85%88%E9%98%9F%E5%88%97.png" alt="alt text"></p>
<h3 id="队列的应用：杨辉三角"><a href="#队列的应用：杨辉三角" class="headerlink" title="队列的应用：杨辉三角"></a>队列的应用：杨辉三角</h3><p><img src="/2025/03/17/StackAndQueue/%E6%9D%A8%E8%BE%89%E4%B8%89%E8%A7%92.png" alt="alt text"><br><br></p>
<h4 id="具体实现："><a href="#具体实现：" class="headerlink" title="具体实现："></a>具体实现：</h4><p>先进队一个1</p>
<blockquote>
<p>此时队列： 1      （这样我们就得到了杨辉三角的第一行）</p>
</blockquote>
<br>


<p>第一步：在队尾&#x3D;&#x3D;进队一个1&#x3D;&#x3D;</p>
<blockquote>
<p>此时队列：1 1</p>
</blockquote>
<p><strong>循环0次</strong>（这里相当于没有进行操作）（看不懂就往下看）</p>
<blockquote>
<p>此时队列：1 1</p>
</blockquote>
<p>在队尾&#x3D;&#x3D;进队一个1&#x3D;&#x3D;</p>
<blockquote>
<p>1 1 1</p>
</blockquote>
<p>&#x3D;&#x3D;出队队头的一个1&#x3D;&#x3D;</p>
<blockquote>
<p>1 1              （这样我们就得到了杨辉三角的第二行）</p>
</blockquote>
<p>（这里看不懂没关系，接着看就懂了）<br><br></p>
<p>第二步：在队尾&#x3D;&#x3D;进队一个1&#x3D;&#x3D;（与第一步中相同操作）</p>
<blockquote>
<p>1 1 1</p>
</blockquote>
<p><strong>循环一次：进队队头两个元素的和（1+1&#x3D;2），即进队2</strong>；</p>
<blockquote>
<p>1 1 1 2</p>
</blockquote>
<p><strong>再出队队头的一个元素（1）。这两个操作为一次循环</strong>。</p>
<blockquote>
<p>1 1 2</p>
</blockquote>
<p>在队尾&#x3D;&#x3D;进队一个1&#x3D;&#x3D;（与第一步中相同操作）</p>
<blockquote>
<p>1 1 2 1</p>
</blockquote>
<p>&#x3D;&#x3D;出队队头的一个1&#x3D;&#x3D;</p>
<blockquote>
<p>1 2 1            （这样我们就得到了杨辉三角的第三行）</p>
</blockquote>
<br>

<p>第三步：</p>
<p>在队尾&#x3D;&#x3D;进队一个1&#x3D;&#x3D;（与第一步中相同操作）</p>
<blockquote>
<p>1 2 1 1</p>
</blockquote>
<p><strong>循环两次：第一次进队队头两个元素的和（1+2&#x3D;3），即进队3</strong>；</p>
<blockquote>
<p>1 2 1 1 3</p>
</blockquote>
<p><strong>再出队队头的一个元素（1）。这两个操作为一次循环</strong>。</p>
<blockquote>
<p>2 1 1 3</p>
</blockquote>
<p><strong>第二次再进队队头两个元素的和（2+1&#x3D;3），即进队3</strong>；</p>
<blockquote>
<p>2 1 1 3 3</p>
</blockquote>
<p><strong>再出队队头的一个元素（2）。这两个操作为第二次循环</strong>。</p>
<blockquote>
<p>1 1 3 3</p>
</blockquote>
<p>在队尾&#x3D;&#x3D;进队一个1&#x3D;&#x3D;（与第一步中相同操作）</p>
<blockquote>
<p>1 1 3 3 1</p>
</blockquote>
<p>&#x3D;&#x3D;出队队头的一个1&#x3D;&#x3D;</p>
<blockquote>
<p>1 3 3 1           （这样我们就得到了杨辉三角的第四行）</p>
</blockquote>
<br>

<blockquote>
<p>经过上面的三步操作，不难看出，每一步都分为三个部分。即：<em><strong>进1；循环；进1出1</strong></em>。所以我们可以控制重复上述步骤的次数，打印出想要的杨辉三角的层数。（并且可以看出，<strong>第一步循环0次；第二步循环1次；第三步循环2次。即循环次数为步数-1</strong>）</p>
</blockquote>
<br>

<h3 id="双栈实现队列"><a href="#双栈实现队列" class="headerlink" title="双栈实现队列"></a>双栈实现队列</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//TODO...</span></span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>LinearList</title>
    <url>/2025/03/17/LinearList/</url>
    <content><![CDATA[<h1 id="线性表"><a href="#线性表" class="headerlink" title="线性表"></a>线性表</h1><blockquote>
<p>线性表（linear list）：具有相同性质的数据元素<mark>顺序排列</mark>形成的优先序列</p>
</blockquote>
<p>由于顺序存储结构存在以下问题：</p>
<ul>
<li>存储空间分配不灵活</li>
<li>运算的空间复杂度高</li>
</ul>
<p><strong>因此，链式存储结构更佳</strong></p>
<h2 id="顺序表——线性表的顺序存储方式"><a href="#顺序表——线性表的顺序存储方式" class="headerlink" title="顺序表——线性表的顺序存储方式"></a>顺序表——线性表的顺序存储方式</h2><blockquote>
<p><strong>顺序表有以下特点</strong>：<br>数据元素依次顺序存储在一组<mark>连续的存储单元</mark>中，知道某个元素的位置就可以计算其他元素，获得任意元素的复杂度为O(1)<br>数据元素的<mark>物理存放顺序与其逻辑顺序一致</mark></p>
</blockquote>
<h3 id="顺序表的查找操作"><a href="#顺序表的查找操作" class="headerlink" title="顺序表的查找操作"></a>顺序表的查找操作</h3><p>顺序查找的ASL（<mark>Average Search Length</mark>）<br><img src="/2025/03/17/LinearList/%E9%A1%BA%E5%BA%8F%E8%A1%A8%E6%9F%A5%E6%89%BE%E7%9A%84ASL.png" alt="alt text"><br>假设每个元素查找的概率相等：P<del>i</del> &#x3D; 1&#x2F;n<br>则ASL &#x3D;（1 + 2 + 3 +…+n）&#x2F; n &#x3D; (n + 1) &#x2F; 2<br><em><strong>时间复杂度为O（n）</strong></em></p>
<h3 id="顺序表的插入操作"><a href="#顺序表的插入操作" class="headerlink" title="顺序表的插入操作"></a>顺序表的插入操作</h3><p><strong>算法步骤</strong>：</p>
<ol>
<li>判断插入位置是否合法</li>
<li>判断顺序表的存储空间是否已满，已满则返回False</li>
<li>空出第 i 个位置，将第 n 至第 i 位的元素依次向后移动一个位置</li>
<li>将要插入的新元素放入第 i 个位置</li>
<li>表长加一</li>
</ol>
<p><strong>复杂度分析</strong>：</p>
<ol>
<li>在第 i 个位置插入元素的先验概率P<del>i</del> &#x3D; 1 &#x2F; n + 1</li>
<li>则期望为：<br><img src="/2025/03/17/LinearList/%E9%A1%BA%E5%BA%8F%E8%A1%A8%E6%8F%92%E5%85%A5%E7%9A%84%E6%9C%9F%E6%9C%9B.png" alt="alt text"></li>
</ol>
<p><em><strong>插入一个元素的平均时间复杂度为O（n）</strong></em></p>
<h3 id="顺序表的删除操作"><a href="#顺序表的删除操作" class="headerlink" title="顺序表的删除操作"></a>顺序表的删除操作</h3><p><strong>算法步骤</strong>：</p>
<ol>
<li>判断插入位置是否合法</li>
<li>将待删除的元素保留</li>
<li>空出第 i + 1 个位置至第 n 位的元素依次向前移动一个位置</li>
<li>表长减一</li>
</ol>
<p><strong>复杂度分析</strong>：</p>
<ol>
<li>在第 i 个位置删除元素的先验概率P<del>i</del> &#x3D; 1 &#x2F; n</li>
<li>共有 n - i - 1 个元素需要移动</li>
<li>则期望为：<br><img src="/2025/03/17/LinearList/%E9%A1%BA%E5%BA%8F%E8%A1%A8%E5%88%A0%E9%99%A4%E7%9A%84%E6%9C%9F%E6%9C%9B.png" alt="alt text"><br><em><strong>删除一个元素的平均时间复杂度为O（n）</strong></em></li>
</ol>
<h3 id="顺序表的优缺点"><a href="#顺序表的优缺点" class="headerlink" title="顺序表的优缺点"></a>顺序表的优缺点</h3><ul>
<li>可以<mark>直接访问</mark>表中的元素</li>
<li>插入&#x2F;删除操作设计<mark>大量元素移动</mark>，复杂度高</li>
<li>静态存储，<mark>不可扩充</mark></li>
</ul>
<h2 id="单向链表——线性表的链式存储方式"><a href="#单向链表——线性表的链式存储方式" class="headerlink" title="单向链表——线性表的链式存储方式"></a>单向链表——线性表的链式存储方式</h2><blockquote>
<p><strong>单向链表表有以下特点</strong>：<br>存储单元<strong>可以不连续</strong><br>用<mark>额外的存储空间</mark>存放数据元素的逻辑位置<br>采用<mark>指针链接</mark>逻辑相邻的元素</p>
</blockquote>
<h3 id="在链表中插入新节点"><a href="#在链表中插入新节点" class="headerlink" title="在链表中插入新节点"></a>在链表中插入新节点</h3><p><img src="/2025/03/17/LinearList/%E5%8D%95%E5%90%91%E9%93%BE%E8%A1%A8%E7%9A%84%E6%8F%92%E5%85%A5.png" alt="alt text"><br><strong>步骤</strong>：</p>
<ol>
<li><code>s -&gt; next = p -&gt; next</code></li>
<li><code>p -&gt; next = s</code></li>
</ol>
<p><em><strong>颠倒顺序会导致自循环</strong></em><br><br></p>
<h3 id="在链表中删除节点"><a href="#在链表中删除节点" class="headerlink" title="在链表中删除节点"></a>在链表中删除节点</h3><p><img src="/2025/03/17/LinearList/%E5%8D%95%E5%90%91%E9%93%BE%E8%A1%A8%E7%9A%84%E5%88%A0%E9%99%A4.png" alt="alt text"><br><strong>步骤</strong>：</p>
<ol>
<li><code>q = p -&gt; next</code></li>
<li><code>p -&gt; next = q -&gt; next</code></li>
<li><code>delete q; q = null</code></li>
</ol>
<h3 id="定义SeqList和LinkList均继承自LinearLis出现的问题"><a href="#定义SeqList和LinkList均继承自LinearLis出现的问题" class="headerlink" title="定义SeqList和LinkList均继承自LinearLis出现的问题"></a>定义SeqList和LinkList均继承自LinearLis出现的问题</h3><p><img src="/2025/03/17/LinearList/%E5%AF%B9%E8%B1%A1%E5%88%87%E5%89%B2.png" alt="alt text"></p>
<p>使用<strong>引用传递</strong>可以避免对象切割，防止破坏多态性：<br><img src="/2025/03/17/LinearList/%E5%BC%95%E7%94%A8%E4%BC%A0%E9%80%92%E9%81%BF%E5%85%8D%E5%AF%B9%E8%B1%A1%E5%88%87%E5%89%B2.png" alt="alt text"><br><br></p>
<h3 id="Slicing-Problem-对象切割问题"><a href="#Slicing-Problem-对象切割问题" class="headerlink" title="Slicing Problem 对象切割问题"></a>Slicing Problem 对象切割问题</h3><blockquote>
<p><strong>产生原因</strong>：</p>
<ul>
<li><p>当<mark>把一个派生类对象赋给一个基类对象</mark>时（并不是使用父类指针或引用接收子类对象），会发生对象切割。(另外用<mark>基类对象强制转换派生类对象</mark>也会)<br><img src="/2025/03/17/LinearList/%E5%AF%B9%E8%B1%A1%E5%88%87%E5%89%B2%E5%8E%9F%E5%9B%A01.png" alt="alt text"></p>
<br>
</li>
<li><p>接收<mark>值传递</mark>的返回值时，发生的拷贝构造也会发生对象切割<br><img src="/2025/03/17/LinearList/%E5%AF%B9%E8%B1%A1%E5%88%87%E5%89%B2%E5%8E%9F%E5%9B%A02.png" alt="alt text"></p>
</li>
</ul>
</blockquote>
<p><em><strong>发生对象切片后派生类的覆盖部分就被切掉了，所以调用的方法将会是父类方法</strong></em></p>
<p>与对象切割类似的，还有<strong>静态联编</strong>问题：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//基类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	 <span class="function"><span class="type">void</span> <span class="title">printError</span><span class="params">()</span></span>&#123;  <span class="comment">//使用virtual关键字声明函数，将其变为虚函数，即可使用多态</span></span><br><span class="line">	 cout &lt;&lt; <span class="string">&quot;基类方法!&quot;</span> &lt;&lt; endl;</span><br><span class="line">	 &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//派生类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Derived</span> : <span class="keyword">public</span> Base&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	 <span class="function"><span class="type">void</span> <span class="title">printError</span><span class="params">()</span></span>&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;派生类方法!&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;	</span><br><span class="line">	Base *ex = <span class="keyword">new</span> <span class="built_in">Derived</span>(); <span class="comment">//静态联编导致子类对象调用基类方法，而不是子类方法</span></span><br><span class="line">	ex-&gt;<span class="built_in">printError</span>(); <span class="comment">//输出基类方法！</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="built_in">test</span>();</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>静态联编</strong>行为：<br>当基类函数<mark>未声明为virtual</mark>时，编译器根据指针&#x2F;引用的<mark>静态类型（声明类型）</mark><br>决定调用哪个函数。<br>示例中<code>Base* ex</code>的静态类型是<code>Base*</code>，因此<code>ex-&gt;printError()</code>直接调用<code>Base::printError()</code>，即使对象实际是Derived类型。</p>
</blockquote>
<p><strong>单向链表的特点</strong>：</p>
<ol>
<li>可以<mark>灵活改变长度</mark></li>
<li>插入&#x2F;删除<mark>无需移动</mark>大量数据</li>
<li>通过<mark>指针</mark>表示数据间的顺序关系</li>
<li>表长需要<mark>遍历</mark>获取</li>
<li>插入&#x2F;删除操作中寻找<mark>相应位置的复杂度高</mark><br></li>
</ol>
<h2 id="双向链表——增加前驱指针的单向链表"><a href="#双向链表——增加前驱指针的单向链表" class="headerlink" title="双向链表——增加前驱指针的单向链表"></a>双向链表——增加前驱指针的单向链表</h2><p><img src="/2025/03/17/LinearList/%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8.png" alt="alt text"><br>对于单向链表，想要获取后继元素，复杂度为O(1),但是想要获取前驱元素，需要遍历，复杂度为O(n)<br><strong>双向链表使得两个操作的复杂度都为O(1)</strong></p>
<h3 id="双向链表的插入操作"><a href="#双向链表的插入操作" class="headerlink" title="双向链表的插入操作"></a>双向链表的插入操作</h3><p><img src="/2025/03/17/LinearList/%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8%E7%9A%84%E6%8F%92%E5%85%A5.png" alt="alt text"></p>
<p><strong>算法步骤</strong>：</p>
<ul>
<li><p>让前驱指向s：</p>
</li>
<li><p><code>p -&gt; prev -&gt; next = s</code>  </p>
<br>
</li>
<li><p>以s为中心，设置它的前驱后继</p>
</li>
<li><p><code>s -&gt; next = p</code>          </p>
</li>
<li><p><code>s -&gt; prev = p -&gt; prev</code>  </p>
<br>
</li>
<li><p>让后继指向s</p>
</li>
<li><p><code>p -&gt; prev = s</code></p>
</li>
</ul>
<h3 id="双向链表的删除操作"><a href="#双向链表的删除操作" class="headerlink" title="双向链表的删除操作"></a>双向链表的删除操作</h3><p><img src="/2025/03/17/LinearList/%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8%E7%9A%84%E5%88%A0%E9%99%A4.png" alt="alt text"></p>
<p><strong>算法步骤</strong>：</p>
<ul>
<li><p>让p的后继往前链接：</p>
</li>
<li><p><code>p -&gt; prev -&gt; next = p -&gt; next</code></p>
<br>
</li>
<li><p>让p的前驱往后链接：</p>
</li>
<li><p><code>p -&gt; next -&gt; prev = p -&gt; prev</code></p>
<br>
</li>
<li><p>删除p</p>
</li>
<li><p><code>delete p</code></p>
</li>
</ul>
]]></content>
  </entry>
</search>
